// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/objectbox_t1.dart';
import 'model/objectbox_t2.dart';
import 'model/objectbox_t3.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 3087481657118427515),
      name: 'ObjectBoxT1',
      lastPropertyId: const IdUid(4, 4984052994542921797),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1560476667569530353),
            name: 'a',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 4685615297705982462),
            name: 'b',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 16586184798512642),
            name: 'c',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4984052994542921797),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1728343955620168437),
      name: 'ObjectBoxT2',
      lastPropertyId: const IdUid(4, 5630315959738607939),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8401908361357818042),
            name: 'a',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 2210909484195731473),
            name: 'b',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6587818191282832208),
            name: 'c',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5630315959738607939),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 7943020941405248270),
      name: 'ObjectBoxT3',
      lastPropertyId: const IdUid(4, 1516327366218257496),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8439017555665899962),
            name: 'a',
            type: 6,
            flags: 8,
            indexId: const IdUid(3, 7994798728118575986)),
        ModelProperty(
            id: const IdUid(2, 8435647761351872290),
            name: 'b',
            type: 6,
            flags: 8,
            indexId: const IdUid(2, 8100205649390064271)),
        ModelProperty(
            id: const IdUid(3, 2490408214389069747),
            name: 'c',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1516327366218257496),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 7943020941405248270),
      lastIndexId: const IdUid(3, 7994798728118575986),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [6418891006209953602],
      retiredIndexUids: const [5790409011910734470],
      retiredPropertyUids: const [
        8724186371832399747,
        8532030161129112573,
        8188850200417676948,
        3696673154244481234,
        7862311510330146488
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ObjectBoxT1: EntityDefinition<ObjectBoxT1>(
        model: _entities[0],
        toOneRelations: (ObjectBoxT1 object) => [],
        toManyRelations: (ObjectBoxT1 object) => {},
        getId: (ObjectBoxT1 object) => object.id,
        setId: (ObjectBoxT1 object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxT1 object, fb.Builder fbb) {
          final cOffset = fbb.writeString(object.c);
          fbb.startTable(5);
          fbb.addInt64(0, object.a);
          fbb.addInt64(1, object.b);
          fbb.addOffset(2, cOffset);
          fbb.addInt64(3, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxT1(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              a: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              b: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              c: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    ObjectBoxT2: EntityDefinition<ObjectBoxT2>(
        model: _entities[1],
        toOneRelations: (ObjectBoxT2 object) => [],
        toManyRelations: (ObjectBoxT2 object) => {},
        getId: (ObjectBoxT2 object) => object.id,
        setId: (ObjectBoxT2 object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxT2 object, fb.Builder fbb) {
          final cOffset = fbb.writeString(object.c);
          fbb.startTable(5);
          fbb.addInt64(0, object.a);
          fbb.addInt64(1, object.b);
          fbb.addOffset(2, cOffset);
          fbb.addInt64(3, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxT2(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              a: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              b: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              c: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    ObjectBoxT3: EntityDefinition<ObjectBoxT3>(
        model: _entities[2],
        toOneRelations: (ObjectBoxT3 object) => [],
        toManyRelations: (ObjectBoxT3 object) => {},
        getId: (ObjectBoxT3 object) => object.id,
        setId: (ObjectBoxT3 object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxT3 object, fb.Builder fbb) {
          final cOffset = fbb.writeString(object.c);
          fbb.startTable(5);
          fbb.addInt64(0, object.a);
          fbb.addInt64(1, object.b);
          fbb.addOffset(2, cOffset);
          fbb.addInt64(3, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxT3(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              a: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              b: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              c: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ObjectBoxT1] entity fields to define ObjectBox queries.
class ObjectBoxT1_ {
  /// see [ObjectBoxT1.a]
  static final a =
      QueryIntegerProperty<ObjectBoxT1>(_entities[0].properties[0]);

  /// see [ObjectBoxT1.b]
  static final b =
      QueryIntegerProperty<ObjectBoxT1>(_entities[0].properties[1]);

  /// see [ObjectBoxT1.c]
  static final c = QueryStringProperty<ObjectBoxT1>(_entities[0].properties[2]);

  /// see [ObjectBoxT1.id]
  static final id =
      QueryIntegerProperty<ObjectBoxT1>(_entities[0].properties[3]);
}

/// [ObjectBoxT2] entity fields to define ObjectBox queries.
class ObjectBoxT2_ {
  /// see [ObjectBoxT2.a]
  static final a =
      QueryIntegerProperty<ObjectBoxT2>(_entities[1].properties[0]);

  /// see [ObjectBoxT2.b]
  static final b =
      QueryIntegerProperty<ObjectBoxT2>(_entities[1].properties[1]);

  /// see [ObjectBoxT2.c]
  static final c = QueryStringProperty<ObjectBoxT2>(_entities[1].properties[2]);

  /// see [ObjectBoxT2.id]
  static final id =
      QueryIntegerProperty<ObjectBoxT2>(_entities[1].properties[3]);
}

/// [ObjectBoxT3] entity fields to define ObjectBox queries.
class ObjectBoxT3_ {
  /// see [ObjectBoxT3.a]
  static final a =
      QueryIntegerProperty<ObjectBoxT3>(_entities[2].properties[0]);

  /// see [ObjectBoxT3.b]
  static final b =
      QueryIntegerProperty<ObjectBoxT3>(_entities[2].properties[1]);

  /// see [ObjectBoxT3.c]
  static final c = QueryStringProperty<ObjectBoxT3>(_entities[2].properties[2]);

  /// see [ObjectBoxT3.id]
  static final id =
      QueryIntegerProperty<ObjectBoxT3>(_entities[2].properties[3]);
}
